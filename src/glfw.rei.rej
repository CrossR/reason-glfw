diff a/src/glfw.rei b/src/glfw.rei	(rejected hunks)
@@ -13,29 +13,29 @@ let glfwTerminate: unit => unit;
 let glfwSwapBuffers: Window.t => unit;
 let glfwSetWindowPos: (Window.t, int, int) => unit;
 let glfwSetWindowSize: (Window.t, int, int) => unit;
-let glfwGetFramebufferSize: (Window.t) => Window.frameBufferSize;
-let glfwMaximizeWindow: (Window.t) => unit;
+let glfwGetFramebufferSize: Window.t => Window.frameBufferSize;
+let glfwMaximizeWindow: Window.t => unit;
 let glfwSetWindowTitle: (Window.t, string) => unit;
-let glfwShowWindow: (Window.t) => unit;
-let glfwHideWindow: (Window.t) => unit;
-let glfwDestroyWindow: (Window.t) => unit;
+let glfwShowWindow: Window.t => unit;
+let glfwHideWindow: Window.t => unit;
+let glfwDestroyWindow: Window.t => unit;
 let glfwSwapInterval: int => unit;
 let glfwGetTime: unit => float;
 let glfwSetTime: float => unit;
 
-module Modifier {
-    type t;
+module Modifier: {
+  type t;
 
-    let of_int: int => t;
+  let of_int: int => t;
 
-    let isShiftPressed: t => bool;
-    let isControlPressed: t => bool;
-    let isAltPressed: t => bool;
-    let isSuperPressed: t => bool;
-}
+  let isShiftPressed: t => bool;
+  let isControlPressed: t => bool;
+  let isAltPressed: t => bool;
+  let isSuperPressed: t => bool;
+};
 
-module MouseButton {
-    type t =
+module MouseButton: {
+  type t =
     | GLFW_MOUSE_LEFT
     | GLFW_MOUSE_RIGHT
     | GLFW_MOUSE_MIDDLE
@@ -95,32 +95,33 @@ let glfwSetCursorPosCallback: (Window.t, glfwCursorPosCallback) => unit;
 type glfwCharCallback = (Window.t, int) => unit;
 let glfwSetCharCallback: (Window.t, glfwCharCallback) => unit;
 
-type glfwKeyCallback = (Window.t, Key.t, int, ButtonState.t, Modifier.t) => unit;
+type glfwKeyCallback =
+  (Window.t, Key.t, int, ButtonState.t, Modifier.t) => unit;
 let glfwSetKeyCallback: (Window.t, glfwKeyCallback) => unit;
 
 type glfwScrollCallback = (Window.t, float, float) => unit;
 let glfwSetScrollCallback: (Window.t, glfwScrollCallback) => unit;
 
-type glfwMouseButtonCallback = (Window.t, MouseButton.t, ButtonState.t, Modifier.t) => unit;
+type glfwMouseButtonCallback =
+  (Window.t, MouseButton.t, ButtonState.t, Modifier.t) => unit;
 let glfwSetMouseButtonCallback: (Window.t, glfwMouseButtonCallback) => unit;
 
 let glfwSetFramebufferSizeCallback:
   (Window.t, glfwFramebufferSizeCallback) => unit;
 
-let glfwSetWindowSizeCallback:
-  (Window.t, glfwWindowSizeCallback) => unit;
+let glfwSetWindowSizeCallback: (Window.t, glfwWindowSizeCallback) => unit;
 
 type glfwCursorPos = {
-    mouseX: float,
-    mouseY: float
+  mouseX: float,
+  mouseY: float,
 };
 let glfwGetCursorPos: Window.t => glfwCursorPos;
 
 let printFrameBufferSize: Window.t => unit;
 
-type glfwRenderLoopCallback = (float) => bool;
+type glfwRenderLoopCallback = float => bool;
 
-let glfwRenderLoop: (glfwRenderLoopCallback) => unit;
+let glfwRenderLoop: glfwRenderLoopCallback => unit;
 
 /* GL */
 
@@ -221,20 +230,40 @@ type glType =
   | GL_UNSIGNED_BYTE
   | GL_UNSIGNED_SHORT;
 
+let glTypeToByteCount: glType => int;
+
 type texture;
 let glCreateTexture: unit => texture;
-let glBindTexture: (textureType, texture) => unit;
-let glTexParameteri:
-  (textureType, textureParameter, textureParameterValue) => unit;
+let glBindTexture: (target, texture) => unit;
+let glTexParameteri: (target, textureParameter, textureParameterValue) => unit;
 let glTexImage2D:
-  (textureType, Image.t) => unit;
-let glGenerateMipmap: textureType => unit;
+  (
+    target,
+    int,
+    format,
+    format,
+    glType,
+    Bigarray.Array2.t(int, Bigarray.int8_unsigned_elt, Bigarray.c_layout)
+  ) =>
+  unit;
+let glTexImage3D:
+  (
+    target,
+    int,
+    format,
+    format,
+    glType,
+    Bigarray.Array3.t(int, Bigarray.int8_unsigned_elt, Bigarray.c_layout)
+  ) =>
+  unit;
+let glGenerateMipmap: target => unit;
 
 type bufferType =
   | GL_ARRAY_BUFFER
   | GL_ELEMENT_ARRAY_BUFFER;
 
-let glVertexAttribPointer: (attribLocation, int, glType, bool) => unit;
+let glVertexAttribPointer:
+  (attribLocation, int, glType, bool, int, int) => unit;
 let glEnableVertexAttribArray: attribLocation => unit;
 
 type buffer;
@@ -259,3 +283,7 @@ type drawMode =
 
 let glDrawArrays: (drawMode, int, int) => unit;
 let glDrawElements: (drawMode, int, glType, int) => unit;
+
+/* Reglfw */
+
+let reglfwTexImage2D: (target, Image.t) => unit;
\ No newline at end of file
